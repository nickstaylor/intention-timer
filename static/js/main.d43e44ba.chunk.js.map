{"version":3,"sources":["images/exercise.svg","images/meditate.svg","images/study.svg","images/exercise-active.svg","images/meditate-active.svg","images/study-active.svg","images/heart-outline.svg","images/heart-filled.svg","images/warning.svg","images/replay.svg","images/delete.svg","images/replay-hollow.svg","Header/Header.js","Form/Form.js","TimerPage/TimerPage.js","ActivityCard/ActivityCard.js","Activities/Activities.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Form","beginActivity","useState","selected","updateSelected","description","updateDescription","minutes","updateMinutes","seconds","updateSeconds","minutesError","updateMinutesError","secondsError","updateSecondsError","descError","updateDescError","handleChange","e","target","name","newValue","value","replace","resetState","changeToTimer","type","min","parseInt","sec","favorite","id","onClick","src","studyActive","study","alt","meditateActive","meditate","exerciseActive","exercise","htmlFor","maxLength","onChange","warning","TimerPage","activity","logActivity","setCurrentActivity","timerCompleted","setTimerCompleted","timerActive","setTimerActive","activityLogged","setActivityLogged","setMinutes","setSeconds","useEffect","timer","setInterval","clearInterval","setTimeout","replay","ActivityCard","deleteActivity","favoriteActivity","replayActivity","setFavorite","heartFilled","heartOutline","deleteIcon","Activities","activities","activityType","active","setActive","activitiesDisplayed","setActivities","showFavorites","setShowFavorites","undefined","console","log","showFavoriteActivities","filteredActivitites","displayedActivities","updatedActivities","filter","desc","toggleFavorite","deleteActivityFromActivities","map","i","key","App","date","currentActivity","setActivityType","loggedActivity","moment","format","Date","now","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d43e44ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/exercise.f6992171.svg\";","module.exports = __webpack_public_path__ + \"static/media/meditate.f5d930c1.svg\";","module.exports = __webpack_public_path__ + \"static/media/study.f0d9cacf.svg\";","module.exports = __webpack_public_path__ + \"static/media/exercise-active.e61afa2b.svg\";","module.exports = __webpack_public_path__ + \"static/media/meditate-active.50ce3e42.svg\";","module.exports = __webpack_public_path__ + \"static/media/study-active.0d75e01c.svg\";","module.exports = __webpack_public_path__ + \"static/media/heart-outline.add65070.svg\";","module.exports = __webpack_public_path__ + \"static/media/heart-filled.4cb763f3.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.1bf915e3.svg\";","module.exports = __webpack_public_path__ + \"static/media/replay.1cd3fd6f.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.96f44736.svg\";","module.exports = __webpack_public_path__ + \"static/media/replay-hollow.6a3a5b72.svg\";","import React from 'react'\nimport './Header.css'\n\nconst Header = () => {\n  return (\n    <header className=\"header\">\n      Intention Timer\n   </header>\n  )\n}\n\nexport default Header;\n","import React, { useState } from 'react'\nimport './Form.css'\nimport exercise from '../images/exercise.svg'\nimport meditate from '../images/meditate.svg'\nimport study from '../images/study.svg'\nimport exerciseActive from '../images/exercise-active.svg'\nimport meditateActive from '../images/meditate-active.svg'\nimport studyActive from '../images/study-active.svg'\nimport warning from '../images/warning.svg'\n\nconst Form = ({beginActivity}) => {\n  const [selected, updateSelected] = useState('')\n  const [description, updateDescription] = useState('')\n  const [minutes, updateMinutes] = useState('')\n  const [seconds, updateSeconds] = useState('')\n  const [minutesError, updateMinutesError] = useState(false)\n  const [secondsError, updateSecondsError] = useState(false)\n  const [descError, updateDescError] = useState(false)\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    let newValue = value.replace(/[^0-9]/, '')\n    if (name === 'minutes'){\n      updateMinutes(newValue)\n    } else {\n      updateSeconds(newValue)\n    }\n  }\n\n  const validateForm = () => {\n    resetState()\n    if (!minutes || minutes > 60){\n      updateMinutesError(true)\n    }\n    if(seconds < 0 || seconds > 59){\n      updateSecondsError(true)\n    }\n    if(!description){\n      updateDescError(true)\n    } \n    if(description && minutes && minutes <= 60 && seconds >= 0 && seconds < 60){\n      changeToTimer()\n    }\n    return\n  }\n\n  const resetState = () =>{\n    updateMinutesError(false)\n    updateSecondsError(false)\n    updateDescError(false)\n  }\n\n  const changeToTimer = () => {\n    beginActivity({type: selected,\n                  description: description,\n                  min: parseInt(minutes),\n                  sec: parseInt(seconds) || 0,\n                  favorite: false})\n  }\n\n  return (\n    <div className=\"form-timer-container\">\n      <h2>New Activity</h2>\n      <section className=\"form-inner-container\">\n        <div>\n          <h3>Select A Category :</h3>\n          <section className=\"menu-buttons\">\n            <button\n              className={selected === \"study\" ? \"study-outline\" : \"\"}\n              id=\"study\"\n              onClick={(e) => updateSelected(e.target.id)}\n            >\n              <img src={selected === \"study\" ? studyActive : study} alt=\"study\" />\n              Study\n            </button>\n\n            <button\n              className={selected === \"meditate\" ? \"meditate-outline\" : \"\"}\n              id=\"meditate\"\n              onClick={(e) => updateSelected(e.target.id)}\n            >\n              <img\n                src={selected === \"meditate\" ? meditateActive : meditate}\n                alt=\"meditate\"\n              />\n              Meditate\n            </button>\n\n            <button\n              className={selected === \"exercise\" ? \"exercise-outline\" : \"\"}\n              id=\"exercise\"\n              onClick={(e) => updateSelected(e.target.id)}\n            >\n              <img\n                src={selected === \"exercise\" ? exerciseActive : exercise}\n                alt=\"exercise\"\n              />\n              Exercise\n            </button>\n          </section>\n        </div>\n        {/* form section inputs */}\n        <section className=\"activity-description\">\n          <label htmlFor=\"description\">\n            What would you like to accomplish during this time?\n          </label>\n          <input\n            type=\"text\"\n            name=\"description\"\n            maxLength=\"60\"\n            value={description}\n            onChange={(e) => updateDescription(e.target.value)}\n          />\n          {descError && (\n            <p className=\"desc-error\">\n              <img src={warning} alt=\"warning\" />\n              Please enter a Description\n            </p>\n          )}\n        </section>\n        <section\n          className={descError ? \"minutes-seconds-error\" : \"minutes-seconds\"}\n        >\n          <div className=\"min-sec-inputs\">\n            <label htmlFor=\"minutes\">Minutes</label>\n            <input\n              type=\"text\"\n              name=\"minutes\"\n              value={minutes}\n              onChange={handleChange}\n            />\n            {minutesError && (\n              <p className=\"min-error\">\n                <img src={warning} alt=\"warning\" />\n                Please enter Minutes (0-60)\n              </p>\n            )}\n          </div>\n          <div className=\"min-sec-inputs\">\n            <label htmlFor=\"seconds\">Seconds</label>\n            <input\n              type=\"text\"\n              name=\"seconds\"\n              value={seconds}\n              onChange={handleChange}\n            />\n            {secondsError && (\n              <p className=\"min-error\">\n                <img src={warning} alt=\"warning\" />\n                Please enter Seconds (0-59)\n              </p>\n            )}\n          </div>\n        </section>\n        <div\n          className={\n            minutesError || secondsError ? \"start-activity-btn-error\" : \"start-activity-btn\"\n          }\n        >\n          <button className=\"start-activity\" onClick={validateForm}>\n            Start Activity\n          </button>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default Form;\n","import React, { useState, useEffect } from 'react'\nimport './TimerPage.css'\nimport replay from '../images/replay.svg'\n\nconst TimerPage = ({ activity, logActivity, setCurrentActivity }) => {\n  // console.log('currentActivity', activity);\n  const [timerCompleted, setTimerCompleted] = useState(false)\n  const [timerActive, setTimerActive] = useState(false)\n  const [activityLogged, setActivityLogged] = useState(false)\n  const [minutes, setMinutes] = useState(activity.min)\n  const [seconds, setSeconds] = useState(activity.sec)\n\n  useEffect(() => {\n    setMinutes(activity.min)\n    setSeconds(activity.sec)\n    setTimerActive(false)\n\n  }, [activity])\n\n  useEffect(() => {\n    let timer = null;\n    if (timerActive) {\n      timer = setInterval(() => {\n        setSeconds(seconds => seconds - 1);\n      }, 1000);\n      if (minutes && seconds < 0) {\n        setMinutes(minutes => minutes - 1)\n        setSeconds(59)\n      }\n      if (minutes === 0 && seconds === 0) {\n        clearInterval(timer)\n        setTimeout(() => setTimerCompleted(true), 1000)\n        setTimeout(() => setTimerActive(false), 1000)\n      }\n    } else if (!timerActive) {\n      clearInterval(timer);\n    }\n    return () => clearInterval(timer);\n  }, [timerActive, seconds]);\n\n  const activateTimer = () => {\n    setTimerActive(!timerActive)\n  }\n\n  const completeActivity = () => {\n    logActivity()\n    setActivityLogged(true)\n  }\n\n  const reloadActivity = () => {\n    logActivity()\n    setTimerCompleted(false)\n    setMinutes(activity.min)\n    setSeconds(activity.sec)\n  }\n\n  return (\n    <div className=\"form-timer-container\">\n      <h2>Current Activity : <span className={`${activity.type}-header`}>{activity.type}</span></h2>\n      <section className=\"timer-inner-container\">\n        {!activityLogged ?\n          <>\n            <section className=\"timer-column-box\">\n              {timerCompleted && <img onClick={reloadActivity} className=\"replay-img\" src={replay} alt=\"replay\" />}\n              <div className=\"top-timer-column-box\">\n                <p>{activity.description}</p>\n                <p className=\"timer-display\">{minutes}:{seconds < 10 ? '0' + seconds : seconds}</p>\n              </div>\n              <button className={`timer-circle-btn ${activity.type}-outline`} onClick={activateTimer}>\n                {timerCompleted ? 'congrats!' : (timerActive ? 'pause' : 'start')}\n              </button>\n            </section>\n            {timerCompleted &&\n              <button className=\"log-activity-btn\" onClick={completeActivity}>\n                Log Activity\n          </button>\n            }\n          </> :\n\n          <button className=\"new-activity-btn\" onClick={() => setCurrentActivity('')}>\n            Create a new activity\n        </button>\n\n        }\n      </section>\n\n    </div>\n  )\n}\n\nexport default TimerPage;\n","import React, { useState, useEffect } from \"react\";\nimport \"./ActivityCard.css\";\nimport heartOutline from \"../images/heart-outline.svg\";\nimport heartFilled from \"../images/heart-filled.svg\";\nimport deleteIcon from \"../images/delete.svg\";\nimport replay from \"../images/replay-hollow.svg\";\n\nconst ActivityCard = ({ activity, deleteActivity, favoriteActivity, replayActivity }) => {\n\n  const [favorite, setFavorite] = useState(activity.favorite);\n\n\n  useEffect(() => {\n    setFavorite(activity.favorite)\n  }, [activity.favorite])\n\n\n  return (\n    <div className=\"activity-card-container\">\n      <div className=\"activity-card-subcontainer\">\n        <section className={`ac-top ${activity.type}`}>\n          <p className={`activity-${activity.type}`}>{activity.type}</p>\n          <p className=\"activity-min-sec\">{activity.min} min</p>\n          {activity.sec !== 0 && (\n            <p className=\"activity-min-sec\">{activity.sec} sec</p>\n          )}\n        </section>\n        <section className=\"ac-bottom\">\n          <p className=\"activity-desc\">{activity.description}</p>\n          <section className=\"activity-btns\">\n            <img\n              className=\"replay-image\"\n              src={replay}\n              alt=\"replay\"\n              onClick={()=> replayActivity(activity)}\n            />\n            <img\n              className=\"heart\"\n              src={favorite ? heartFilled : heartOutline}\n              alt=\"favorite\"\n              onClick={()=> favoriteActivity(activity.id)}\n            />\n            <img\n              className=\"delete-img\"\n              src={deleteIcon}\n              onClick={() => deleteActivity(activity.id)}\n              alt=\"delete\"\n            />\n          </section>\n        </section>\n      </div>\n    </div>\n  );\n};\n\nexport default ActivityCard;\n","import React, {useState, useEffect} from 'react'\nimport './Activities.css'\nimport ActivityCard from '../ActivityCard/ActivityCard'\nimport heartFilled from '../images/heart-filled.svg'\nimport heartOutline from '../images/heart-outline.svg'\nimport exercise from '../images/exercise.svg'\nimport meditate from '../images/meditate.svg'\nimport study from '../images/study.svg'\nimport exerciseActive from '../images/exercise-active.svg'\nimport meditateActive from '../images/meditate-active.svg'\nimport studyActive from '../images/study-active.svg'\n\n\nconst Activities = ({ activities, deleteActivity, favoriteActivity, activityType, replayActivity }) => {\n  const [active, setActive] = useState('')\n  const [activitiesDisplayed, setActivities] = useState('')\n  const [showFavorites, setShowFavorites] = useState(false)\n\n  // console.log('activities', activities);\n  useEffect(() => {\n \n    if (!activityType || activityType === undefined) {\n      console.log('there is no type', activityType);\n      setActivities(activities)\n      return\n    }\n    if (activityType === 'favorites') {\n      console.log('the type is favorites', activityType);\n      showFavoriteActivities()\n    } else {\n      console.log('there is a type:', activityType);\n      filteredActivitites(activityType)\n    }\n\n  }, [activities])\n\n  const showFavoriteActivities = () => {\n    setActive('')\n    let updatedActivities = activities.filter(activity => activity.favorite === true);\n\n    if (showFavorites) {\n      setActivities(activities)\n      setShowFavorites(!showFavorites)\n      return\n    }\n    setShowFavorites(!showFavorites)\n    setActivities(updatedActivities)\n  }\n  \n  \n  \n  const filteredActivitites = (desc, id) => {\n    if (active === desc) {\n      setActive('')\n      setActivities(activities)\n      return\n    }\n    let updatedActivities = activities.filter(activity => activity.type === desc)\n    setActive(desc)\n    setShowFavorites(false)\n    setActivities(updatedActivities)\n  }\n\n  \n  const toggleFavorite = (id) => {\n      if (showFavorites) {\n        favoriteActivity(id, 'favorites');\n        showFavoriteActivities()\n      } else {\n        favoriteActivity(id, active);\n        filteredActivitites(active, id)\n      }\n  }\n  \n    const deleteActivityFromActivities = (id) => {\n      if (showFavorites) {\n        deleteActivity(id, \"favorites\");\n        showFavoriteActivities();\n      } else {\n        deleteActivity(id, active);\n        filteredActivitites(active, id);\n      }\n    };\n\n  \n  let displayedActivities\n  if (activitiesDisplayed) {\n    displayedActivities = activitiesDisplayed.map((activity, i) => {\n      return (\n        <ActivityCard\n          key={i}\n          activity={activity}\n          deleteActivity={deleteActivityFromActivities}\n          favoriteActivity={toggleFavorite}\n          replayActivity={replayActivity}\n        />\n      )\n    })\n  }\n  \n  return (\n    <div className=\"activities-container\">\n      <section className=\"activity-section-header\">\n        <h2>Past Activities</h2>\n        <div className=\"activity-icons\">\n          <img\n            className=\"heart\"\n            src={showFavorites ? heartFilled: heartOutline}\n            alt=\"all-favorites\"\n            onClick={showFavoriteActivities}\n         />\n          <img\n            src={active === \"study\" ? studyActive : study}\n            alt=\"study-favorites\"\n            onClick={()=> filteredActivitites(\"study\")}\n          />\n          <img\n            src={active === \"meditate\" ? meditateActive : meditate}\n            alt=\"meditate-favorites\"\n            onClick={()=>filteredActivitites(\"meditate\")}\n          />\n          <img\n            src={active === \"exercise\" ? exerciseActive : exercise}\n            alt=\"exercise-favorites\"\n            onClick={()=>filteredActivitites(\"exercise\")}\n          />\n        </div>\n      </section>\n      <section className=\"activities-inner-container\">\n        {displayedActivities}\n      </section>\n    </div>\n  );\n}\n\nexport default Activities;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"../Header/Header\";\nimport Form from \"../Form/Form\";\nimport TimerPage from \"../TimerPage/TimerPage\";\nimport Activities from \"../Activities/Activities\";\nimport moment from 'moment';\n\nfunction App() {\n  let activityData = [\n    {\n      type: \"meditate\",\n      description: \"Calm the mind\",\n      min: 15,\n      sec: 0,\n      date: \"08/15/20\",\n      id: 1,\n      favorite: false,\n    },\n    {\n      type: \"study\",\n      description: \"Practice React Hooks\",\n      min: 25,\n      sec: 0,\n      date: \"08/16/20\",\n      id: 2,\n      favorite: true,\n    },\n    {\n      type: \"exercise\",\n      description: \"Weight Lifting\",\n      min: 45,\n      sec: 0,\n      date: \"08/15/20\",\n      id: 3,\n      favorite: false,\n    },\n      {type: \"study\",\n      description: \"Learn Express\",\n      min: 22,\n      sec: 0,\n      date: \"08/24/20\",\n      id: 4,\n      favorite: true,\n    },\n    {\n      type: \"exercise\",\n      description: \"Tennis\",\n      min: 60,\n      sec: 0,\n      date: \"08/25/20\",\n      id: 5,\n      favorite: true,\n    }\n  ];\n\n  let sampleActivity = {\n    date: \"8/20/2020\",\n    description: \"Learn Express\",\n    favorite: false,\n    id: 1597973827053,\n    min: 0,\n    sec: 3,\n    type: \"study\",\n  };\n\n  const [activities, setActivities] = useState(activityData);\n  const [currentActivity, setCurrentActivity] = useState(\"\");\n  const [activityType, setActivityType] = useState(\"\");\n\n\n  const beginActivity = (activity) => {\n    setCurrentActivity(activity);\n  };\n\n  const logActivity = () => {\n    let loggedActivity = {\n      ...currentActivity,\n      date: moment().format(\"l\"),\n      id: Date.now(),\n    };\n\n    console.log(\"logged activity\", loggedActivity);\n    let updatedActivities = [loggedActivity, ...activities];\n    setActivities(updatedActivities);\n  };\n  \n  const deleteActivity = (id, type) => {\n    let updatedActivities = activities.filter((activity) => activity.id !== id);\n    setActivities(updatedActivities);\n    setActivityType(type);\n  };\n    \n  const favoriteActivity = (id, type) => {\n    console.log('type', type);\n    let updatedActivities = activities.map(activity => {\n      if (activity.id === id) {\n        activity.favorite = !activity.favorite;\n      }\n      return activity\n    })\n    setActivities(updatedActivities);\n    setActivityType(type)\n  };\n\n  const replayActivity = (activity) => {\n    console.log(activity);\n    setCurrentActivity({type: activity.type,\n                        description: activity.description,\n                        min: activity.min,\n                        sec: activity.sec,\n                        favorite: activity.favorite})\n  }\n\n  console.log('app activities', activities);\n  return (\n    <div className=\"App\">\n      <Header />\n\n      {currentActivity ? (\n        <TimerPage\n          activity={currentActivity}\n          logActivity={logActivity}\n          setCurrentActivity={setCurrentActivity}\n        />\n      ) : (\n        <Form beginActivity={beginActivity} />\n      )}\n\n      {!activities.length ? (\n        <section className=\"activities-container\">\n          <h2>Past Activities</h2>\n          <p className=\"no-activity-msg\">\n            You haven't logged any activities yet.\n          </p>\n          <p className=\"no-activity-msg\">Complete the form to get started!</p>\n        </section>\n      ) : (\n        <Activities\n          activities={activities}\n          deleteActivity={deleteActivity}\n          favoriteActivity={favoriteActivity}\n          activityType={activityType}\n          replayActivity={replayActivity}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}